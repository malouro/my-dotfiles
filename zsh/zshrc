# zsh & oh-my-zsh
# ====================================================================
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
ZSH_THEME_RANDOM_CANDIDATES=(
	"robbyrussell"
	"agnoster"
	"fwalch"
	"frontcube"
	"half-life"
)

# Text to append to beginning of prompt
# ZSH_BEGINNING_TEXT=" ⚡️ "

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git npm yarn docker zsh-autosuggestions zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# User name display for terminal
DEFAULT_USER=$USER$(prompt_context(){})

# zsh-hooks
autoload -U add-zsh-hook


# Aliases
# ====================================================================

alias ls='ls -GFh'
alias ll='ls -alF'
alias la='ls -A'
# NOTE: This requires coreutils installed for Mac
alias l='gls --color -ahF --group-directories-first'


# Dev environment setups
# ====================================================================

# PATH
# ==================================
export PATH="$HOME/.bin:/usr/local/bin/git:/usr/local/bin:/usr/bin\
:$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin\
:$HOME/.npm/bin:$HOME/.config/npm/global/node_modules/.bin\
:$PATH
"

# Brew
eval "$(/opt/homebrew/bin/brew shellenv)"

# VSCode
MAC_VSCODE_LOCATION="/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
if [ -f "${MAC_VSCODE_LOCATION}/code" ]; then
	PATH="$PATH:$MAC_VSCODE_LOCATION"
fi

# Node
# (npm, yarn, nvm, etc.)
# ==================================

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Loads nvm only on first invocation of Node/NPM like command usages
# Greatly increases shell start up time
nvm() {
	unset -f nvm
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
	nvm "$@"
}

node() {
	unset -f node
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
	node "$@"
}

npm() {
	unset -f npm
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
	npm "$@"
}

yarn() {
	unset -f yarn
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
	yarn "$@"
}

# Set to `true` to automatically invoke "nvm use" when opening directory with .nvmrc
AUTO_USE_NVM="false"

# If .nvmrc exists; warn user or auto-use `nvm use`
check_nvm() {
	if [[ -f "$PWD/.nvmrc" && -r "$PWD/.nvmrc" ]]; then
		if [ "$AUTO_USE_NVM" = "true" ]; then
			nvm use
		else
			echo ".nvmrc file detected in directory. Use \"nvm use\" to activate & use the expected node version for this project."
		fi
	fi
}

# Add check_nvm hook for change in directory
add-zsh-hook chpwd check_nvm
check_nvm


# Python
# ==================================
# pyenv
# Set up pyenv vars
# Initializes pyenv for shell on startup
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
