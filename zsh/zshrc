# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# zsh & oh-my-zsh
# ====================================================================
# Plugin settings
zstyle ':omz:lib:theme-and-appearance' gnu-ls yes
zstyle ':omz:plugins:nvm' lazy yes
zstyle ':omz:plugins:nvm' autoload yes

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"


# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes

## NOTE :: Theme disabled while using Powerlevel10k (see @powerlevel10k below)
# ZSH_THEME="zshiggy"

## zshiggy theme vars:
# ZSHIGGY_SYMBOL="↯"
# ZSHIGGY_GIT_SYMBOL="git"
# ZSHIGGY_NODE_ENABLED=false

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
ZSH_THEME_RANDOM_CANDIDATES=(
	"robbyrussell"
	"agnoster"
	"fwalch"
	"frontcube"
	"half-life"
)

# Text to append to beginning of prompt
# ZSH_BEGINNING_TEXT=" ⚡️ "

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	git
	git-prompt
	npm
	nvm
	yarn
	docker
	docker-compose
	zsh-autosuggestions
	zsh-npm-scripts-autocomplete
	zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh
source $HOME/.lscolors.sh

# @powerlevel10k
source /opt/homebrew/share/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# User name display for terminal
DEFAULT_USER=$USER$(prompt_context(){})

# zsh-hooks
autoload -U add-zsh-hook


# Aliases
# ====================================================================

# For systems that don't have gls, we fallback to ls
_ls_cmd() {
	# update list as stuff is added into LS aliases list bellow
	local eza_flags=(
		"--icons=.*"
		"--color=.*"
		"--color-scale-mode=.*"
		"--hyperlink"
		"--tree"
	)
	local not_eza_flags=(
		-F
	)
	if which eza &> /dev/null; then
		# Remove any non-"eza" flags from command
		args="$@"
		for flag in "${not_eza_flags[@]}"; do
			args=${args//${flag}/}
		done
		eza "$@"
	else
		# Remove any "eza" flags from command
		args="$@"
		for flag in "${eza_flags[@]}"; do
			args=${args//${flag}/}
		done
		sh -c "ls $args"
	fi
}

alias ls='_ls_cmd --color=always --color-scale-mode=gradient -hG  --icons=always --hyperlink'
alias lr='_ls_cmd --color=always --color-scale-mode=gradient -hG  --icons=always --group-directories-first --hyperlink --tree'
alias ll='_ls_cmd --color=always --color-scale-mode=gradient -al  --icons=always --hyperlink'
alias la='_ls_cmd --color=always --color-scale-mode=gradient -aa  --icons=always --hyperlink'
alias l='_ls_cmd  --color=always --color-scale-mode=gradient -ahG --icons=always --group-directories-first'

# For 'git' plugin: replace "gst" with just "gs"
alias gs='git status'
unalias gst

do-ls() { emulate -L zsh; l; }

# Dev environment setups
# ====================================================================

# SSH
# ==================================
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# PATH
# ==================================
export PATH="$HOME/.bin:/usr/local/bin/git:/usr/local/bin:/usr/bin\
:$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin\
:$HOME/.npm/bin:$HOME/.config/npm/global/node_modules/.bin\
:$PATH
"

# Brew
if [ -f "/opt/homebrew/bin/brew" ]; then
	eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# VSCode
MAC_VSCODE_LOCATION="/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
if [ -f "${MAC_VSCODE_LOCATION}/code" ]; then
	PATH="$PATH:$MAC_VSCODE_LOCATION"
fi

# Node
# (npm, yarn, nvm, etc.)
# ==================================

export COREPACK_ENABLE_AUTO_PIN=0

alias n='npm'

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

# Set to `true` to automatically invoke "nvm use" when opening directory with .nvmrc
# (only when current Node version is not matching with nvmrc contents)
AUTO_USE_NVM="false"

# If .nvmrc exists; warn user or auto-use `nvm use`
check_nvm() {
	if [[ -f "$PWD/.nvmrc" && -r "$PWD/.nvmrc" ]]; then
		local _nvmrc_contents="$(cat ./.nvmrc | tr -d " \t\n\r")"

		if [ "$(nvm version $_nvmrc_contents)" != "$(node -v)" ]; then
			if [ "$AUTO_USE_NVM" = "true" ]; then
				nvm use
			else
				echo "$fg_bold[red].nvmrc file detected in the directory. Use \"nvm use\" to activate & use the expected node version for this project.$reset_color"
			fi
		fi
	fi
}

# Add check_nvm hook for change in directory
# add-zsh-hook chpwd check_nvm
add-zsh-hook chpwd do-ls
check_nvm


# Python
# ==================================
# pyenv
# Set up pyenv vars
# Initializes pyenv for shell on startup
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"


# Rust
# ==================================
# . "$HOME/.cargo/env"

